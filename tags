!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BuildRules	scanner/scanner.go	/^func (self *Conf) BuildRules() {$/;"	f
Conf	main.go	/^type Conf struct {$/;"	t
Conf	scanner/scanner.go	/^type Conf struct {$/;"	t
ConfOutput	scanner/scanner.go	/^func (self *Conf) ConfOutput() {$/;"	f
ConfParse	scanner/scanner.go	/^func ConfParse(content []byte) (*Conf, error) {$/;"	f
FastScanner	main.go	/^type FastScanner struct {$/;"	t
Free	scanner/hsmatcher.go	/^func (self *HSMatcher) Free() error {$/;"	f
HSConfig	scanner/scanner.go	/^type HSConfig struct {$/;"	t
HSContext	scanner/hsmatcher.go	/^type HSContext struct {$/;"	t
HSMatcher	scanner/hsmatcher.go	/^type HSMatcher struct {$/;"	t
Match	scanner/hsmatcher.go	/^func (self *HSMatcher) Match(ctx *HSContext) error {$/;"	f
NewHSMatcher	scanner/hsmatcher.go	/^func NewHSMatcher(rules []Rule, mz string, db hyperscan.BlockDatabase, scratch *hyperscan.Scratch) (*HSMatcher, error) {$/;"	f
NewScanner	scanner/scanner.go	/^func NewScanner(confData []byte, mctx *context.Context, cf *Conf) (*Scanner, error) {$/;"	f
Output	scanner/hsmatcher.go	/^func (self *HSMatcher) Output() {$/;"	f
Policy	scanner/scanner.go	/^type Policy struct {$/;"	t
Rule	scanner/scanner.go	/^type Rule struct {$/;"	t
Scanner	scanner/scanner.go	/^type Scanner struct {$/;"	t
ServeStart	main.go	/^func ServeStart(mctx *context.Context) {$/;"	f
Start	scanner/scanner.go	/^func (self *Scanner) Start() {$/;"	f
Stop	scanner/scanner.go	/^func (self *Scanner) Stop() {$/;"	f
addr	main.go	/^	addr     string$/;"	v
confFile	main.go	/^	confFile string$/;"	v
fastScanner	main.go	/^var fastScanner FastScanner$/;"	v
init	main.go	/^func init() {$/;"	f
init	scanner/scanner.go	/^func (self *Scanner) init() {$/;"	f
isdev	main.go	/^	isdev    bool$/;"	v
logFile	main.go	/^	logFile  string$/;"	v
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
onMatch	scanner/hsmatcher.go	/^func onMatch(id uint, from, to uint64, flags uint, context interface{}) error {$/;"	f
requestHandler	main.go	/^func requestHandler(ctx *fasthttp.RequestCtx) {$/;"	f
scanner	scanner/hsmatcher.go	/^package scanner$/;"	p
scanner	scanner/scanner.go	/^package scanner$/;"	p
version	main.go	/^	version  bool$/;"	v
